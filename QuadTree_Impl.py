from PIL import Image
from genSeq import mainFunc
import math
import tkinter as tk
from tkinter import filedialog
import sys
import subprocess



#for storing a cartesian point 
class point:
	def __init__(self, iX, iY):
		self.iX = iX
		self.iY = iY
#to store a node
class node:
	def __init__(self, data, point):
		self.data = data
		self.point = point

#Work in PROGRESS !
def outorder1(quad, num, level, clevel, final):
	#print "\nSTART"
	clevel+=1
	if num==1 and hasattr(quad, 'topLeftChild') and hasattr(quad, 'topRightChild'):
		#print "has topLeft && topright"
		final.append(outorder1(quad.topLeftChild, 1, level, clevel, final))
		final.append(outorder1(quad.topRightChild, 1, level, clevel, final))
		# final.append(outorder1(quad.topLeftChild, 2, level, clevel, final))
		# final.append(outorder1(quad.topRightChild, 2, level, clevel, final))

	if num==2 and hasattr(quad, 'botLeftChild') and hasattr(quad, 'botRightChild'):
		#print "has botLeft && botright"
		final.append(outorder1(quad.botLeftChild, 2, level, clevel, final))
		final.append(outorder1(quad.botRightChild, 2, level, clevel, final))
		# final.append(outorder1(quad.botLeftChild, 1, level, clevel, final))
		# final.append(outorder1(quad.botRightChild, 1, level, clevel, final))

	if level==clevel:
		final.append(quad.node.data)
	
	# if num==2 and hasattr(quad, 'node'):	
	# 	return(quad.node.data)
	#print "END\n"

def inorder(quad):
	#print "\nSTART"
	if hasattr(quad, 'topLeftChild'):
		#print "has topLeft"
		inorder(quad.topLeftChild)
	if hasattr(quad, 'topRightChild'):
		#print "has topright"
		inorder(quad.topRightChild)
	if hasattr(quad, 'botLeftChild'):
		#print "has botLeft"
		inorder(quad.botLeftChild)
	if hasattr(quad, 'botRightChild'):
		#print "has botRight"
		inorder(quad.botRightChild)
	if hasattr(quad, 'node'):	
		print(quad.node.data)
		#print(quad.node.data, "--", quad.node.point.iX,",",quad.node.point.iY);
	#print "RETURN"

#for storing a quad
class quad:
	def __init__(self, TLpoint, BRpoint):
		self.TLpoint = TLpoint
		self.BRpoint = BRpoint 
	def add(self, apoint, data):
		self.BRpoint.iX = int(self.BRpoint.iX)
		self.BRpoint.iY = int(self.BRpoint.iY)
		self.TLpoint.iX = int(self.TLpoint.iX)
		self.TLpoint.iY = int(self.TLpoint.iY)
		#print("tl(",self.TLpoint.iX,",",self.TLpoint.iY,")","br(",self.BRpoint.iX,",",self.BRpoint.iY,")","point(",apoint.iX,",",apoint.iY,")")
		#print("DBUG9(",self.BRpoint.iX,",",self.BRpoint.iY,")")
		#print("DBUG99 ",apoint.iX, ",", apoint.iY)
		if self.checkBoundry(apoint):
			print("OutOfRange!")
			print("tl(",self.TLpoint.iX,",",self.TLpoint.iY,")","br(",self.BRpoint.iX,",",self.BRpoint.iY,")","point(",apoint.iX,",",apoint.iY,")")
			#exit()
			return
		if ((self.BRpoint.iX - self.TLpoint.iX) <= 1) or ((self.BRpoint.iY - self.TLpoint.iY) <= 1):
			
			#print("LessThan1", "(",self.TLpoint.iX,",",self.TLpoint.iY,")","-","(",self.BRpoint.iX,",",self.BRpoint.iY,")")
			self.node = node(data, apoint)
			#print("Node Added ! at ","(",self.TLpoint.iX,",",self.TLpoint.iY,")","(",self.BRpoint.iX,",",self.BRpoint.iY,")")
			#print "Node Added !"
			#print("\n")
			return 

		#print("TLPoint", self.TLpoint.iX, ", ", self.TLpoint.iY)
		if ((self.BRpoint.iX + self.TLpoint.iX)/2)>=apoint.iX: #((8-0)/2)>=7 false
			if ((self.BRpoint.iY + self.TLpoint.iY)/2)>=apoint.iY:
				#firstQuadOK
				#print "fq"
				#print("firstQuad", "Point(",apoint.iX,",",apoint.iY,")", "TLPoint(",self.TLpoint.iX,",",self.TLpoint.iY,")","BRPoint(",self.BRpoint.iX,",",self.BRpoint.iY,")")
				#print("(",self.TLpoint.iX,",",self.TLpoint.iY,")(",(self.BRpoint.iX+self.TLpoint.iX)/2,",",(self.BRpoint.iY+self.TLpoint.iY)/2,")")
				if not hasattr(self, 'topLeftChild'):
					self.topLeftChild = quad(self.TLpoint, point((self.BRpoint.iX+self.TLpoint.iX)/2,(self.BRpoint.iY+self.TLpoint.iY)/2))
				#print("XYZ",hasattr(self, 'topLeftChild'));
				self.topLeftChild.add(apoint, data)
				#print "Added"
			else:
				#print "tq"
				#thirdQuadOK
				#print("thirdQuad", "Point(",apoint.iX,",",apoint.iY,")", "TLPoint(",self.TLpoint.iX,",",self.TLpoint.iY,")","BRPoint(",self.BRpoint.iX,",",self.BRpoint.iY,")")
				#print(self.TLpoint.iX,",",self.BRpoint.iY/2,"\n")
				if not hasattr(self, 'botLeftChild'):
					self.botLeftChild = quad(point(self.TLpoint.iX,(self.BRpoint.iY+self.TLpoint.iY)/2), point((self.BRpoint.iX+self.TLpoint.iX)/2,self.BRpoint.iY))
				#print("(",self.botLeftChild.TLpoint.iX,",",self.botLeftChild.TLpoint.iY,")","(",self.botLeftChild.BRpoint.iX,",",self.botLeftChild.BRpoint.iY,")")
				self.botLeftChild.add(apoint, data)
				#print "Added"
		else:	
			if ((self.BRpoint.iY + self.TLpoint.iY)/2)<apoint.iY:
				#fourthQuadOK
				#print "foq"
				#print("fourthQuad", "Point(",apoint.iX,",",apoint.iY,")", "TLPoint(",self.TLpoint.iX,",",self.TLpoint.iY,")","BRPoint(",self.BRpoint.iX,",",self.BRpoint.iY,")")
				if not hasattr(self, 'botRightChild'):
					self.botRightChild = quad(point((self.BRpoint.iX+self.TLpoint.iX)/2,(self.BRpoint.iY+self.TLpoint.iY)/2), self.BRpoint)
				#print("(",(self.BRpoint.iX+self.TLpoint.iX)/2,",",self.TLpoint.iY,")(",self.BRpoint.iX,",",(self.BRpoint.iY+self.TLpoint.iY)/2)
				self.botRightChild.add(apoint, data)
				#print "Added"
			else:
				#secondQuadOK
				#print "sq"
				#print("secondQuad", "Point(",apoint.iX,",",apoint.iY,")", "TLPoint(",self.TLpoint.iX,",",self.TLpoint.iY,")","BRPoint(",self.BRpoint.iX,",",self.BRpoint.iY,")")
				if not hasattr(self, 'topRightChild'):
					self.topRightChild = quad(point((self.BRpoint.iX+self.TLpoint.iX)/2,self.TLpoint.iY), point(self.BRpoint.iX,(self.BRpoint.iY+self.TLpoint.iY)/2))
				#print("(",(self.BRpoint.iX),",--,",(self.TLpoint.iX),",",self.TLpoint.iY,")(",self.BRpoint.iX,",",(self.BRpoint.iY+self.TLpoint.iY)/2)
				self.topRightChild.add(apoint, data)
				#print "Added"
		#to calculate average values of all parent nodes
		self.Red=0
		self.Green=0
		self.Blue=0
		self.iC=0
		if hasattr(self, 'topLeftChild'):
			if hasattr(self.topLeftChild, 'node'):
				#print "tl"
				self.Red+=self.topLeftChild.node.data[0]
				self.Green+=self.topLeftChild.node.data[1]
				self.Blue+=self.topLeftChild.node.data[2]
				self.iC+=1
		if hasattr(self, 'topRightChild'):
			if hasattr(self.topRightChild, 'node'):
				#print "tr"
				self.Red+=self.topRightChild.node.data[0]
				self.Green+=self.topRightChild.node.data[1]
				self.Blue+=self.topRightChild.node.data[2]
				self.iC+=1
		if hasattr(self, 'botLeftChild'):
			if hasattr(self.botLeftChild, 'node'):
				#print "bl"
				self.Red+=self.botLeftChild.node.data[0]
				self.Green+=self.botLeftChild.node.data[1]
				self.Blue+=self.botLeftChild.node.data[2]
				self.iC+=1
		if hasattr(self, 'botRightChild'):
			if hasattr(self.botRightChild, 'node'):
				#print "br"
				self.Red+=self.botRightChild.node.data[0]
				self.Green+=self.botRightChild.node.data[1]
				self.Blue+=self.botRightChild.node.data[2]
				self.iC+=1
		self.node = node((int(self.Red/self.iC), int(self.Green/self.iC), int(self.Blue/self.iC)), point(-1,-1))

	#to check whether a point is within range of quad or not
	def checkBoundry(self, point):
		#returns true but should false
		#print("if: ",self.TLpoint.iX,"<=",point.iX)
		if self.TLpoint.iX <= point.iX:
			#print("if: ",self.TLpoint.iY,"<=",point.iY)
			if self.TLpoint.iY <= point.iY:
				#print("if: ",self.BRpoint.iX,">=",point.iX) 
				if self.BRpoint.iX >= point.iX:
					#print("if: ",self.BRpoint.iY,">=",point.iY)
					if self.BRpoint.iY >= point.iY:
						return False
		return True

#find nodes at a particular level
def findNodes(q1, flevel, clevel, store):
	if q1==None:
		return
	if clevel==0:
		if hasattr(q1, 'node'):
			store.append(q1.node.data)
		return
	clevel-=1
	if hasattr(q1, 'topLeftChild'):
		findNodes(q1.topLeftChild, flevel, clevel, store)
	if hasattr(q1, 'topRightChild'):
		findNodes(q1.topRightChild, flevel, clevel, store)
	if hasattr(q1, 'botLeftChild'):
		findNodes(q1.botLeftChild, flevel, clevel, store)
	if hasattr(q1, 'botRightChild'):
		findNodes(q1.botRightChild, flevel, clevel, store)		

#find depth of tree
def findDepth(q1, depth):
	tl=tr=bl=br=0
	depth+=1
	if hasattr(q1, 'topLeftChild'):
		tl = findDepth(q1.topLeftChild, depth)
	if hasattr(q1, 'topRightChild'):
		tr = findDepth(q1.topRightChild, depth)
	if hasattr(q1, 'botLeftChild'):
		bl = findDepth(q1.botLeftChild, depth)
	if hasattr(q1, 'botRightChild'):
		br = findDepth(q1.botRightChild, depth)
	return max(tl,tr,bl,br,depth)
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#&&&&&&&&&&&&&&&&&&&&  MAIN METHOD STARTS !! &&&&&&&&&&&&&&&&&&&&&&&&&
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#read image and convert to RGB

def openImage(path):
    imageViewerFromCommandLine = {'linux':'xdg-open',
                                  'win32':'explorer',
                                  'darwin':'open'}[sys.platform]
    subprocess.run([imageViewerFromCommandLine, path])

def main():
	root=tk.Tk()
	root.geometry("600x700")
	root.title("Image Manipulation Using QuadTree")

	

	fileName = ""
	def clicked():

		fileName=filedialog.askopenfilename(filetypes = (("JPEG Files","*.jpg"),("PNG Files","*.png"),("TIFF Files", ".tiff"),("BMP Files", ".bmp")))
		
		#imgName=raw_input("Please enter image name: ")
		imgName=fileName
		try:
			image = Image.open(imgName, 'r')
		except:
			tk.Label(root, text="No image exists !").grid(row=2, column=0)
			print("No image exists !",imgName)
			exit()

		print("Reading image...")
		image=image.convert("RGB")
		#save width and height of image
		width, height = image.size


		#get image pixel values (row by row)
		#like  ((0,0,0),(255,0,0),(0,255,0),(0,0,255),(255,0,0),(0,0,255),(0,0,0),(0,255,0),(0,0,0),(255,0,0),(0,255,0),(0,0,255),(255,0,0),(0,0,255),(0,0,0),(0,255,0))
		lists = list(image.getdata())


		#make a quad of (0,0) to (width, height)
		q1 = quad(point(0,0),point(width,height))

		lbl=tk.Label(root, text="Generating coordinates...")
		lbl.grid(row=3, column=0)
		lbl.after(1)
		print("Generating coordinates...")
		#as image is read in row-by-row, we can generate sequence ((1,1)(2,1)(3,1)...Width) X height
		seq = list()
		for i in range(1, height+1):
			for j in range(1, width+1):
					seq.append((j, i))


		#make quadtree
		lbl=tk.Label(root, text="Making a quadtree...(will take time)")
		lbl.grid(row=4, column=0)
		print("Making a quadtree...(will take time)")
		counter=0
		for i in range(len(lists)):
			q1.add(point(seq[i][0], seq[i][1]), lists[i])
			counter += 1

		#find depth of quadtree
		tk.Label(root, text="Finding depth of quadtree...").grid(row=5, column=0)
		print("Finding depth of quadtree...");
		depth=findDepth(q1, 0)

		#make a list for storing RGB tuples
		tupleList=list()

		#Get data from specific depth
		tk.Label(root, text="Getting data at 6th depth, i.e. (4^6)32*32 pixels....").grid(row=6, column=0)
		print("Getting data at 6th depth, i.e. (4^6)32*32 pixels....")
		findNodes(q1, depth, 6, tupleList)
		ini=6
		print("TRUFALSE",len(tupleList) != int(math.pow(4, ini)))
		print(tupleList==[])
		while(len(tupleList) != int(math.pow(4, ini)) and ini > 1):
			tupleList=[]
			tk.Label(root, text="No data at depth "+str(ini)+" exists!").grid(row=7, column=0)
			 
			print("No data at depth "+str(ini)+" exists!")
			ini += -1
			tk.Label(root, text="Getting data at "+str(ini)+"th depth, i.e. (4^"+str(ini)+") pixels....").grid(row=8, column=0)
			 
			print("Getting data at "+str(ini)+"th depth, i.e. (4^"+str(ini)+") pixels....")
			findNodes(q1, depth, ini, tupleList)
			print( len(tupleList), "--", int(math.pow(4, ini)))
		#print tupleList
		# print "\n\n"
		# print len(tupleList)
		newList=list()
		#index=[0,1,4,5,2,3,6,7,8,9,12,13,10,11,14,15];
		tk.Label(root, text="Generating sequence for storing....").grid(row=9, column=0)
		 
		print("Generating sequence for storing.... ")
		#print "ini = "+str(ini)
		size=int(math.sqrt(math.pow(4,ini)))
		if(size==2):
			inddex=[0,1,2,3]
			#1iterations ---- 15Sec
		elif(size==4):
			inddex=[0, 1, 4, 5, 2, 3, 6, 7, 8, 9, 12, 13, 10, 11, 14, 15]
			#1iterations ---- 15Sec
		elif(size==8):
			inddex=[0, 1, 4, 5, 16, 17, 20, 21, 2, 3, 6, 7, 18, 19, 22, 23, 8, 9, 12, 13, 24, 25, 28, 29, 10, 11, 14, 15, 26, 27, 30, 31, 32, 33, 36, 37, 48, 49, 52, 53, 34, 35, 38, 39, 50, 51, 54, 55, 40, 41, 44, 45, 56, 57, 60, 61, 42, 43, 46, 47, 58, 59, 62, 63]
			#3iterations ---- 45sec
		elif(size==16):
			inddex=[0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 2, 3, 6, 7, 18, 19, 22, 23, 66, 67, 70, 71, 82, 83, 86, 87, 8, 9, 12, 13, 24, 25, 28, 29, 72, 73, 76, 77, 88, 89, 92, 93, 10, 11, 14, 15, 26, 27, 30, 31, 74, 75, 78, 79, 90, 91, 94, 95, 32, 33, 36, 37, 48, 49, 52, 53, 96, 97, 100, 101, 112, 113, 116, 117, 34, 35, 38, 39, 50, 51, 54, 55, 98, 99, 102, 103, 114, 115, 118, 119, 40, 41, 44, 45, 56, 57, 60, 61, 104, 105, 108, 109, 120, 121, 124, 125, 42, 43, 46, 47, 58, 59, 62, 63, 106, 107, 110, 111, 122, 123, 126, 127, 128, 129, 132, 133, 144, 145, 148, 149, 192, 193, 196, 197, 208, 209, 212, 213, 130, 131, 134, 135, 146, 147, 150, 151, 194, 195, 198, 199, 210, 211, 214, 215, 136, 137, 140, 141, 152, 153, 156, 157, 200, 201, 204, 205, 216, 217, 220, 221, 138, 139, 142, 143, 154, 155, 158, 159, 202, 203, 206, 207, 218, 219, 222, 223, 160, 161, 164, 165, 176, 177, 180, 181, 224, 225, 228, 229, 240, 241, 244, 245, 162, 163, 166, 167, 178, 179, 182, 183, 226, 227, 230, 231, 242, 243, 246, 247, 168, 169, 172, 173, 184, 185, 188, 189, 232, 233, 236, 237, 248, 249, 252, 253, 170, 171, 174, 175, 186, 187, 190, 191, 234, 235, 238, 239, 250, 251, 254, 255]
			#2iterations ---- 30sec
		elif(size==32):
			inddex=[0, 1, 4, 5, 16, 17, 20, 21, 64, 65, 68, 69, 80, 81, 84, 85, 256, 257, 260, 261, 272, 273, 276, 277, 320, 321, 324, 325, 336, 337, 340, 341, 2, 3, 6, 7, 18, 19, 22, 23, 66, 67, 70, 71, 82, 83, 86, 87, 258, 259, 262, 263, 274, 275, 278, 279, 322, 323, 326, 327, 338, 339, 342, 343, 8, 9, 12, 13, 24, 25, 28, 29, 72, 73, 76, 77, 88, 89, 92, 93, 264, 265, 268, 269, 280, 281, 284, 285, 328, 329, 332, 333, 344, 345, 348, 349, 10, 11, 14, 15, 26, 27, 30, 31, 74, 75, 78, 79, 90, 91, 94, 95, 266, 267, 270, 271, 282, 283, 286, 287, 330, 331, 334, 335, 346, 347, 350, 351, 32, 33, 36, 37, 48, 49, 52, 53, 96, 97, 100, 101, 112, 113, 116, 117, 288, 289, 292, 293, 304, 305, 308, 309, 352, 353, 356, 357, 368, 369, 372, 373, 34, 35, 38, 39, 50, 51, 54, 55, 98, 99, 102, 103, 114, 115, 118, 119, 290, 291, 294, 295, 306, 307, 310, 311, 354, 355, 358, 359, 370, 371, 374, 375, 40, 41, 44, 45, 56, 57, 60, 61, 104, 105, 108, 109, 120, 121, 124, 125, 296, 297, 300, 301, 312, 313, 316, 317, 360, 361, 364, 365, 376, 377, 380, 381, 42, 43, 46, 47, 58, 59, 62, 63, 106, 107, 110, 111, 122, 123, 126, 127, 298, 299, 302, 303, 314, 315, 318, 319, 362, 363, 366, 367, 378, 379, 382, 383, 128, 129, 132, 133, 144, 145, 148, 149, 192, 193, 196, 197, 208, 209, 212, 213, 384, 385, 388, 389, 400, 401, 404, 405, 448, 449, 452, 453, 464, 465, 468, 469, 130, 131, 134, 135, 146, 147, 150, 151, 194, 195, 198, 199, 210, 211, 214, 215, 386, 387, 390, 391, 402, 403, 406, 407, 450, 451, 454, 455, 466, 467, 470, 471, 136, 137, 140, 141, 152, 153, 156, 157, 200, 201, 204, 205, 216, 217, 220, 221, 392, 393, 396, 397, 408, 409, 412, 413, 456, 457, 460, 461, 472, 473, 476, 477, 138, 139, 142, 143, 154, 155, 158, 159, 202, 203, 206, 207, 218, 219, 222, 223, 394, 395, 398, 399, 410, 411, 414, 415, 458, 459, 462, 463, 474, 475, 478, 479, 160, 161, 164, 165, 176, 177, 180, 181, 224, 225, 228, 229, 240, 241, 244, 245, 416, 417, 420, 421, 432, 433, 436, 437, 480, 481, 484, 485, 496, 497, 500, 501, 162, 163, 166, 167, 178, 179, 182, 183, 226, 227, 230, 231, 242, 243, 246, 247, 418, 419, 422, 423, 434, 435, 438, 439, 482, 483, 486, 487, 498, 499, 502, 503, 168, 169, 172, 173, 184, 185, 188, 189, 232, 233, 236, 237, 248, 249, 252, 253, 424, 425, 428, 429, 440, 441, 444, 445, 488, 489, 492, 493, 504, 505, 508, 509, 170, 171, 174, 175, 186, 187, 190, 191, 234, 235, 238, 239, 250, 251, 254, 255, 426, 427, 430, 431, 442, 443, 446, 447, 490, 491, 494, 495, 506, 507, 510, 511, 512, 513, 516, 517, 528, 529, 532, 533, 576, 577, 580, 581, 592, 593, 596, 597, 768, 769, 772, 773, 784, 785, 788, 789, 832, 833, 836, 837, 848, 849, 852, 853, 514, 515, 518, 519, 530, 531, 534, 535, 578, 579, 582, 583, 594, 595, 598, 599, 770, 771, 774, 775, 786, 787, 790, 791, 834, 835, 838, 839, 850, 851, 854, 855, 520, 521, 524, 525, 536, 537, 540, 541, 584, 585, 588, 589, 600, 601, 604, 605, 776, 777, 780, 781, 792, 793, 796, 797, 840, 841, 844, 845, 856, 857, 860, 861, 522, 523, 526, 527, 538, 539, 542, 543, 586, 587, 590, 591, 602, 603, 606, 607, 778, 779, 782, 783, 794, 795, 798, 799, 842, 843, 846, 847, 858, 859, 862, 863, 544, 545, 548, 549, 560, 561, 564, 565, 608, 609, 612, 613, 624, 625, 628, 629, 800, 801, 804, 805, 816, 817, 820, 821, 864, 865, 868, 869, 880, 881, 884, 885, 546, 547, 550, 551, 562, 563, 566, 567, 610, 611, 614, 615, 626, 627, 630, 631, 802, 803, 806, 807, 818, 819, 822, 823, 866, 867, 870, 871, 882, 883, 886, 887, 552, 553, 556, 557, 568, 569, 572, 573, 616, 617, 620, 621, 632, 633, 636, 637, 808, 809, 812, 813, 824, 825, 828, 829, 872, 873, 876, 877, 888, 889, 892, 893, 554, 555, 558, 559, 570, 571, 574, 575, 618, 619, 622, 623, 634, 635, 638, 639, 810, 811, 814, 815, 826, 827, 830, 831, 874, 875, 878, 879, 890, 891, 894, 895, 640, 641, 644, 645, 656, 657, 660, 661, 704, 705, 708, 709, 720, 721, 724, 725, 896, 897, 900, 901, 912, 913, 916, 917, 960, 961, 964, 965, 976, 977, 980, 981, 642, 643, 646, 647, 658, 659, 662, 663, 706, 707, 710, 711, 722, 723, 726, 727, 898, 899, 902, 903, 914, 915, 918, 919, 962, 963, 966, 967, 978, 979, 982, 983, 648, 649, 652, 653, 664, 665, 668, 669, 712, 713, 716, 717, 728, 729, 732, 733, 904, 905, 908, 909, 920, 921, 924, 925, 968, 969, 972, 973, 984, 985, 988, 989, 650, 651, 654, 655, 666, 667, 670, 671, 714, 715, 718, 719, 730, 731, 734, 735, 906, 907, 910, 911, 922, 923, 926, 927, 970, 971, 974, 975, 986, 987, 990, 991, 672, 673, 676, 677, 688, 689, 692, 693, 736, 737, 740, 741, 752, 753, 756, 757, 928, 929, 932, 933, 944, 945, 948, 949, 992, 993, 996, 997, 1008, 1009, 1012, 1013, 674, 675, 678, 679, 690, 691, 694, 695, 738, 739, 742, 743, 754, 755, 758, 759, 930, 931, 934, 935, 946, 947, 950, 951, 994, 995, 998, 999, 1010, 1011, 1014, 1015, 680, 681, 684, 685, 696, 697, 700, 701, 744, 745, 748, 749, 760, 761, 764, 765, 936, 937, 940, 941, 952, 953, 956, 957, 1000, 1001, 1004, 1005, 1016, 1017, 1020, 1021, 682, 683, 686, 687, 698, 699, 702, 703, 746, 747, 750, 751, 762, 763, 766, 767, 938, 939, 942, 943, 954, 955, 958, 959, 1002, 1003, 1006, 1007, 1018, 1019, 1022, 1023]
			#5iterations ---- 75sec 1min-15sec
		elif(size==64):
			inddex
			#9iterations ---- 135sec 2min-15sec
		else:
			inddex=mainFunc(size)
		#[0,1,4,5,16,17,20,21,2,3,6,7,18,19,22,23,8,9,12,13,24,25,28,29,10,11,14,15,26,27,30,31,32,33,36,37,48,49,52,53,34,35,38,39,50,51,54,55,40,41,44,45,56,57,60,61,42,43,46,47,58,59,62,63]
		    #  [0,1,8,9,2,3,10,11,16,17,24,25,18,19,26,27,4,5,12,13,6,7,14,15,20,21,28,29,22,23,30,31,32,33,40,41,34,35,42,43,48,49,56,57,50,51,58,59,36,37,44,45,38,39,46,47,52,53,60,61,54,55,62,63]

		# print len(inddex)
		# print len(tupleList)
		tk.Label(root, text="Arranging pixels to store...").grid(row=10, column=0)
		 
		print("Arranging pixels to store...")
		# print(len(inddex))
		# print size*size
		# print len(tupleList)

		print(size*size,"--", len(inddex), len(tupleList))
		for i in range(0, size*size):
			newList.append(tupleList[inddex[i]])

		image=Image.new("RGB", (size,size), color=0)
		tk.Label(root, text="Storing pixels(data) to an image file...").grid(row=11, column=0)
		 
		print("Storing pixels(data) to an image file...")
		image.putdata(newList)

		tk.Label(root, text="Saving file... (Output.png)").grid(row=12, column=0)
		 
		print("Saving file... (Output.png)")
		tk.Label(root, text="Saved file ! ").grid(row=13, column=0)
		tk.Label(root, text="Opening file... ").grid(row=14, column=0)
		 
		print("Saved file ! ")
		image.save("Output.png")

		op=Image.open("Output.png", 'r')
		openImage("Output.png")
	
	tk.Button(root, text="Click to browse file", command=clicked).grid(row=0, column=0, pady=50, padx=160)	
	tk.Label(root, text="Please Wait After selecting file ! It can take upto 2-3 minutes (depending on image size).").grid(row=1, column=0)

	root.mainloop()

main()
